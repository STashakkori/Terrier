// $t@$h
// QVLx Labs
use regex::Regex;
use walkdir::WalkDir;
use rayon::prelude::*;
use std::process::Command;
use std::collections::{HashMap, HashSet};
use std::fs;
use std::sync::Mutex;
use std::sync::Arc;

fn main() {
    let keywords = vec![
        "driver", "kernel", "memory", "ethernet", "network", "VxWorks 5", "VxWorks 6",
        "VxWorks 7", "hypervisor", "TCP", "UDP", "flash", "uart", "jtag", "overflow", "stack", "cache"
    ];
    let filter_year = "ALL";
    let results = Arc::new(Mutex::new(HashMap::new()));
    let total_files_per_year = Arc::new(Mutex::new(HashMap::new()));

    // Recurse dir
    WalkDir::new("exploitdb/exploits/VxWorks")
        .into_iter()
        .filter_map(|e| e.ok())
        .filter(|e| e.file_type().is_file())
        .par_bridge()
        .for_each(|entry| {
            let path = entry.path();
            if let Ok(content) = fs::read_to_string(path) {
                let year = get_git_commit_year(path);

                if filter_year == "ALL" || filter_year == year {
                    let mut files_with_keywords = HashSet::new();
                    let mut res = results.lock().unwrap();
                    let year_results = res.entry(year.clone()).or_insert_with(HashMap::new);

                    for &keyword in &keywords {
                        if Regex::new(keyword).unwrap().is_match(&content) {
                            files_with_keywords.insert(keyword);
                        }
                    }

                    for &keyword in files_with_keywords.iter() {
                        *year_results.entry(keyword.to_string()).or_insert(0) += 1;
                    }

                    let mut total_year = total_files_per_year.lock().unwrap();
                    *total_year.entry(year.clone()).or_insert(0) += 1;
                    drop(total_year);
                    drop(res);
                }
            }
        });

    // Percentages
    let results = results.lock().unwrap();
    let total_files_per_year = total_files_per_year.lock().unwrap();
    for (year, keywords_counts) in results.iter() {
        println!("Year: {}", year);
        let total_files = total_files_per_year[year];
        for (keyword, &count) in keywords_counts {
            let percentage = (count as f64 / total_files as f64) * 100.0;
            println!("{}: {} ({:.2}%)", keyword, count, percentage);
        }
        println!("\n");
    }
}

// Commit year
fn get_git_commit_year(path: &std::path::Path) -> String {
    let output = Command::new("git")
        .arg("log")
        .arg("-1")
        .arg("--format=%cd")
        .arg("--date=format:%Y")
        .arg(path.to_str().unwrap())
        .output()
        .expect("Failed to execute git command");
    String::from_utf8_lossy(&output.stdout).trim().to_string()
}
